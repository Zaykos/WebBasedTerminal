#!/usr/bin/env node


// Require dependencies

var app = require('../app');
var io = app.io;
var http = require('http');

// We set the http server port to 3000

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// We create the http server linked to the socket.io client side

var server = http.createServer(app);

// Listen on the provided port (3000) and listen on all interfaces

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
io.attach(server);

// Parse the port number to a string, int, boolean

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// Event listener for the http server error if the server isn't listening we throw an error

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.log(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.log(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for the http server onListening

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
